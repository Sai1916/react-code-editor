{"version":3,"sources":["components/Editor.js","components/LiveView.js","components/data.js","components/useLocalStorage.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","language","name","value","onChange","className","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumbers","LiveView","src","srcDoc","title","sandbox","frameBorder","width","height","id","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","open","setOpen","doc","setDoc","timeout","setTimeout","clearTimeout","map","file","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7c38a76.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Editor.css'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/css/css'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\r\n\r\nfunction Editor({language,name,value,onChange}){\r\n\r\n    const TextChange = (editor,data,value) => {\r\n        onChange(value);\r\n    }\r\n\r\n    return(\r\n        <div className=\"editor\">\r\n            <div className=\"editor_header\">\r\n                <h4>{name}</h4>\r\n            </div>\r\n            <ControlledEditor\r\n                onBeforeChange={TextChange}\r\n                value={value}\r\n                className=\"editor_text\"\r\n                options={{\r\n                lineWrapping: true,\r\n                lint: true,\r\n                mode: language,\r\n                lineNumbers: true\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Editor\r\n","import React from 'react'\r\nimport './LiveView.css'\r\n\r\nfunction LiveView({src}){\r\n    return(\r\n        <div className=\"live\">\r\n            <h2 className=\"title\">Live Preview</h2>\r\n            <div className=\"browser_view\">\r\n                <iframe \r\n                    srcDoc={src}\r\n                    title=\"Output\"\r\n                    sandbox=\"allow-scripts\"\r\n                    frameBorder=\"0\"\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LiveView","export const data=[\r\n    {\r\n        id:\"1\",\r\n        name:\"index.html\",\r\n        language:\"xml\",\r\n        value:''\r\n    },\r\n    {\r\n        id:\"2\",\r\n        name:\"index.css\",\r\n        language:\"css\",\r\n        value:''\r\n    },\r\n    {\r\n        id:\"3\",\r\n        name:\"index.js\",\r\n        language:\"js\",\r\n        value:''\r\n    }\r\n]","import { useEffect, useState } from 'react'\r\n\r\nconst prefix = 'online-editor'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = prefix + key\r\n\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}","import './App.css';\nimport {useEffect, useState} from 'react'\nimport Editor from './components/Editor'\nimport LiveView from './components/LiveView'\nimport { data } from './components/data';\nimport useLocalStorage from './components/useLocalStorage'\n\nfunction App() {\n  const [html,setHtml] = useLocalStorage('html','');\n  const [css,setCss] = useLocalStorage('css','');\n  const [js,setJs] = useLocalStorage('js','');\n\n  const [open,setOpen] = useState('xml');\n\n  const [doc,setDoc] = useState('')\n\n  useEffect(() =>{\n    const timeout = setTimeout(() =>{\n      setDoc(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>\n      `\n      )\n    },200)\n      return () => clearTimeout(timeout)\n  },[html,css,js])\n\n  return (\n    <div className=\"app\">\n      <div className=\"file_explorer\">\n            <h5>FILE EXPLORER</h5>\n            <hr />\n            <div className=\"files\">\n                {data.map((file) => (\n                    <button key={file.id} value={file.language} onClick={()=> {setOpen(file.language)}}>{file.name}</button>\n                ))}\n            </div>\n        </div>\n      <div className=\"editors\">\n        {open === \"xml\" && <Editor language=\"xml\" name=\"index.html\" value={html} onChange={setHtml}/>}\n        {open === \"css\" && <Editor language=\"css\" name=\"index.css\" value={css} onChange={setCss}/>}\n        {open === \"js\" && <Editor language=\"js\" name=\"index.js\" value={js} onChange={setJs}/> }\n      </div>\n      <LiveView src={doc}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}